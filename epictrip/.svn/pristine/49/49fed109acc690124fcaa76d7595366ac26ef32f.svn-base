package com.web.epictrip.controller;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.web.epictrip.repository.UserinfoRepository;
import com.web.epictrip.service.ChatService;
import com.web.epictrip.vo.ChatMessage;
import com.web.epictrip.vo.ChatMessageDTO;
import com.web.epictrip.vo.ChatRoom;
import com.web.epictrip.vo.ChatRoomRequestDTO;
import com.web.epictrip.vo.Message;
import com.web.epictrip.vo.MessageDTO;
import com.web.epictrip.vo.User;
import com.web.epictrip.vo.Userinfo;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class ChatController {

    @Autowired
    private ChatService chatService;
    
    // 세션 처리
    public User getLoginUser(HttpServletRequest request ) {
        HttpSession session = request.getSession();
        User userInfo = (User) session.getAttribute("userInfo");
        return userInfo;
    }
    @GetMapping("/message")
    public String message(HttpServletRequest request, Model model) {
        User loginUser = getLoginUser(request);
        model.addAttribute("loginUser", loginUser);
        return "message";
    }
    
    @GetMapping("/message_userAdChat")
    public String message_userAdChat(HttpServletRequest request, Model model) {
        User loginUser = getLoginUser(request);
        model.addAttribute("loginUser", loginUser);
        return "message_userAdChat";
    }
    //  chatService.saveMessage(chatMessage);

    @Autowired
    private UserinfoRepository userinfoRepository; // Userinfo의 Repository

    @MessageMapping("/send")
    @SendTo("/topic/messages")
    public ChatMessage sendMessage(ChatMessageDTO chatMessageDTO) { // ChatMessageDTO는 JSON 데이터를 바인딩하기 위한 DTO
        System.out.println(chatMessageDTO.getContent());
        System.out.println(chatMessageDTO.getSenderId());
        Userinfo sender = userinfoRepository.findById(chatMessageDTO.getSenderId()).orElse(null);
        System.out.println(sender.getName());
        if (sender == null) {
            throw new IllegalArgumentException("Sender with ID " + chatMessageDTO.getSenderId() + " not found");
        }

        ChatMessage chatMessage = new ChatMessage();
        chatMessage.setContent(chatMessageDTO.getContent());
        chatMessage.setSender(sender);
        chatMessage.setTimestamp(LocalDateTime.now());
        // sender의 정보를 ChatMessage 객체에 설정
        chatMessage.setSenderId(sender.getUserid());
        chatMessage.setSenderName(sender.getName());
        chatMessage.setSenderImage(sender.getImage());
        chatMessage.setSenderIntroduce(sender.getUserIntroduce());
        chatMessage.setSenderBirth(sender.getBirth());
        chatMessage.setSenderGender(sender.getGender());

        return chatMessage;
    }
    // 접속자 알림 및 회원정보 객체 할당
    @MessageMapping("/notify")
    @SendTo("/topic/messages")
    public ChatMessage notifyUser(ChatMessageDTO chatMessageDTO) {
        // 데이터베이스에서 senderId를 사용하여 Userinfo 객체를 가져옵니다.
        Userinfo sender = userinfoRepository.findById(chatMessageDTO.getSenderId()).orElse(null);
        if (sender == null) {
            throw new IllegalArgumentException("Sender with ID " + chatMessageDTO.getSenderId() + " not found");
        }

        if (chatMessageDTO.getType().equals("JOIN")) {
            chatService.addUser(sender);
        } else if (chatMessageDTO.getType().equals("LEAVE")) {
            chatService.removeUser(sender);
        }

        ChatMessage chatMessage = new ChatMessage();

        switch (chatMessageDTO.getType()) {
            case "JOIN":
                chatMessage.setContent(sender.getName() + "님이 입장하셨습니다.");
                break;
            case "LEAVE":
                chatMessage.setContent(sender.getName() + "님이 나가셨습니다.");
                break;
            default:
                throw new IllegalArgumentException("Unknown notification type: " + chatMessageDTO.getType());
        }

        // ChatMessage 객체에 필요한 사용자 정보 설정
        chatMessage.setSenderId(sender.getUserid());
        chatMessage.setSenderName(sender.getName());
        chatMessage.setSenderImage(sender.getImage());
        chatMessage.setSenderIntroduce(sender.getUserIntroduce());
        chatMessage.setSenderBirth(sender.getBirth());
        chatMessage.setSenderGender(sender.getGender());

        chatMessage.setType(chatMessageDTO.getType());
        chatMessage.setTimestamp(LocalDateTime.now());
        return chatMessage;
    }



    @MessageMapping("/getUsers")
    @SendTo("/topic/users")
    @ResponseBody
    public Set<Userinfo> getCurrentUsers() {
    	System.out.println("#getCurrentUsers 메서드 실행#");
    	System.out.println(chatService.getCurrentUsers());
        return chatService.getCurrentUsers();
    }

    @PostMapping("/sendChatMessage")
    @ResponseBody
    public ResponseEntity<Void> sendChatMessage(@RequestBody ChatMessage chatMessage) {
        chatService.saveMessage(chatMessage);
        return ResponseEntity.ok().build();
    }
    
    // 채팅방 생성
    @PostMapping("/room")
    public ResponseEntity<ChatRoom> createRoom(@RequestBody ChatRoomRequestDTO request) {
        String userid = request.getUserid();
        String postOwnerId = request.getPostOwnerId();
        String cptitle = request.getCptitle();

        // 채팅방 생성 또는 기존 채팅방 조회
        ChatRoom chatRoom = chatService.findOrCreateChatRoom(userid, postOwnerId, cptitle);

        // 채팅방 참여자 추가 로직
        chatService.addParticipantToChatRoom(chatRoom.getId(), userid);
        chatService.addParticipantToChatRoom(chatRoom.getId(), postOwnerId);

        return new ResponseEntity<>(chatRoom, HttpStatus.CREATED);
    }


    // 특정 사용자가 참여하고 있는 채팅방 목록 조회
    @GetMapping("/rooms")
    public ResponseEntity<List<ChatRoom>> getChatRoomsForUser(@RequestParam String userId) {
        List<ChatRoom> chatRooms = chatService.getChatRoomsForUser(userId);
        return new ResponseEntity<>(chatRooms, HttpStatus.OK);
    }

    // 메시지 전송
    @PostMapping("/room/{roomId}/message")
    public ResponseEntity<Message> sendMessage(
            @PathVariable Long roomId,
            @RequestBody MessageDTO messageDTO) {
        Message message = chatService.sendMessage(roomId, messageDTO.getSenderId(), messageDTO.getContent());
        return new ResponseEntity<>(message, HttpStatus.CREATED);
    }

    // 채팅방의 메시지 목록 조회
    @GetMapping("/room/{roomId}/messages")
    public ResponseEntity<List<Message>> getMessagesForRoom(@PathVariable Long roomId) {
        List<Message> messages = chatService.getChatRoomMessages(roomId);  // 여기를 수정했습니다.
        return new ResponseEntity<>(messages, HttpStatus.OK);
    }
    
    // 동행 확정
    @PostMapping("/room/{roomId}/confirm")
    public ResponseEntity<Void> confirmGroupon(@PathVariable Long roomId, @RequestParam String userId, @RequestParam String participantId) {
        chatService.confirmGroupon(roomId, userId, participantId);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    // 동행 확정 취소
    @DeleteMapping("/room/{roomId}/cancel")
    public ResponseEntity<Void> cancelGroupon(@PathVariable Long roomId, @RequestParam String userId, @RequestParam String participantId) {
        chatService.cancelGroupon(roomId, userId, participantId);
        return new ResponseEntity<>(HttpStatus.OK);
    }
}