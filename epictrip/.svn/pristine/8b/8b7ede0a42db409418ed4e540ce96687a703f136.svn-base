// JavaScript 코드 예시
const memChatButton = document.getElementById('memChat');
const adminChatButton = document.getElementById('adminChat');

// URL에서 현재 페이지의 파일명을 추출하는 함수
function getCurrentPageFileName() {
  const urlParts = window.location.href.split('/');
  return urlParts[urlParts.length - 1];
}

const currentPageFileName = getCurrentPageFileName();

if (currentPageFileName === 'message') {
  memChatButton.classList.add('selected');
}

if (currentPageFileName === 'message_userAdChat') {
  adminChatButton.classList.add('selected');
}

const messageTextarea = document.getElementById('messageTextarea');
const sendButton = document.getElementById('sendButton');

messageTextarea.addEventListener('input', function() {
    if (messageTextarea.value.trim() !== '') {
        sendButton.classList.add('send');
    } else {
        sendButton.classList.remove('send');
    }
});

document.addEventListener("DOMContentLoaded", function() {
  var roomTitles = document.querySelectorAll(".roomtitle p");

  roomTitles.forEach(function(roomTitle) {
      if (roomTitle.textContent.length > 18) {
          var originalText = roomTitle.textContent;
          roomTitle.textContent = originalText.slice(0, 18) + "···";
      }
  });
});

// 말 줄임...
document.addEventListener("DOMContentLoaded", function() {
  var chatroomName = document.querySelectorAll(".chatroomname p");

  chatroomName.forEach(function(chatroomName) {
      if (chatroomName.textContent.length > 50) {
          var originalText = chatroomName.textContent;
          chatroomName.textContent = originalText.slice(0, 50) + "···";
      }
  });
});

// 동행 확정, 취소 토글 버튼
const groupToggleButtons = document.querySelectorAll('.groupToggle');
const grouponTexts = document.querySelectorAll('.groupon');

groupToggleButtons.forEach((button, index) => {
  button.addEventListener('click', () => {
    if (button.classList.contains('cancel')) {
      button.textContent = '확정';
      button.classList.remove('cancel');
      grouponTexts[index].innerText = '';
    } else {
      button.textContent = '취소';
      button.classList.add('cancel');
      grouponTexts[index].innerText = '동행 확정';
    }
  });
});

// 동행 확정 모달 열기, 닫기
function openSelm(){
  var selmModal = document.querySelector(".selmModal");
  selmModal.style.display = "block";
}

function closeSelm(){
  var selmModal = document.querySelector(".selmModal");
  selmModal.style.display = "none";
}

// =============== 모달 js ==================
// ms모달 열기,닫기
function memMpclose(){
  var memMpModal = document.querySelector(".memMpModal");
  memMpModal.style.display = "none";
}
function memMpopen(){
  var memMpModal = document.querySelector(".memMpModal");
  memMpModal.style.display = "flex";
}
// 
// .goodMem 버튼 클릭 시 토글 동작
function recogood() {
  var goodButton = document.querySelector('.goodMem');
  goodButton.classList.toggle('choice');
}

// .badMem 버튼 클릭 시 토글 동작
function recobad() {
  var badButton = document.querySelector('.badMem');
  badButton.classList.toggle('choiceB');
}
//-----------
// 채팅 스크롤 하단 이동
function scrollToBottom() {
    let messageArea = document.getElementById('messageArea');
    messageArea.scrollTop = messageArea.scrollHeight;
}

//----------------------------------------------------------------------------------
// 채팅 기능
// WebSocket 및 STOMP 클라이언트 설정
let socket = new SockJS('/ws');
let stompClient = Stomp.over(socket);

stompClient.connect({}, function(frame) {
    console.log('Connected: ' + frame);
    
    // 로컬 스토리지에서 'joinedChat' 항목을 확인
    let hasJoined = localStorage.getItem('joinedChat');

    if (!hasJoined) {
        let chatNotification = {
            type: 'JOIN',
            senderId: document.body.getAttribute('data-userid'),
            senderName: document.body.getAttribute('data-name')
        };
        stompClient.send("/app/notify", {}, JSON.stringify(chatNotification));
        localStorage.setItem('joinedChat', 'true');
    }

	stompClient.subscribe('/topic/messages', function(message) {
		console.log("Received message:", message.body);
	    let receivedMessage = JSON.parse(message.body);
	
	    if (receivedMessage.type) {
	        if (receivedMessage.type === 'JOIN' || receivedMessage.type === 'LEAVE') {
	            displayNotification(receivedMessage.content);
	        }
	        if (receivedMessage.type === 'LEAVE') {
	            removeUser(receivedMessage.senderId);
	        }
	    } else {
	        saveMessageToLocalStorage(receivedMessage.chatRoomId, receivedMessage);  // 채팅방 별로 메시지 저장
	        
	        // 현재 채팅방의 cpkey와 수신된 메시지의 chatRoomId가 동일한 경우에만 메시지를 화면에 표시합니다.
	        if (receivedMessage.chatRoomId === cpkey) {
	            displayMessage(receivedMessage.senderId, receivedMessage.senderName, receivedMessage.content, receivedMessage.senderImage);
	        }
	    }
	});


    stompClient.subscribe('/topic/users', function(users) {
        displayUsers(JSON.parse(users.body));
    });
   function displayNotification(message) {
       let messageArea = document.getElementById('messageArea');
       messageArea.innerHTML += `<li class="ment"><p class="mentp">${message}</p></li>`;
      scrollToBottom();
   }
document.getElementById('exitButton').addEventListener('click', function() {
    let isConfirmed = window.confirm("채팅방을 나가시겠습니까?");
    if (isConfirmed) {
        let chatRooms = JSON.parse(localStorage.getItem('chatRooms')) || [];
        let loggedInUserId = document.body.getAttribute('data-userid');

        // 해당 사용자가 참여 중인 특정 채팅방을 로컬 스토리지에서 삭제합니다.
        chatRooms = chatRooms.filter(room => room.key !== cpkey);

        // 해당 채팅방의 채팅 내용을 로컬 스토리지에서 삭제합니다.
        localStorage.removeItem(`chatMessages_${cpkey}`);

        localStorage.setItem('chatRooms', JSON.stringify(chatRooms));

        let chatNotification = {
            type: 'LEAVE',
            senderId: loggedInUserId,
            senderName: document.body.getAttribute('data-name'),
            chatRoomId: cpkey 
        };
        alert("app/notify: 실행?:"+ chatNotification);
        stompClient.send("/app/notify", {}, JSON.stringify(chatNotification));
        window.location.reload();
    }
});



    stompClient.send("/app/getUsers", {});

}, function(error) {
    console.error('WebSocket Connection Error:', error);
});

let cpkey = new URL(window.location.href).searchParams.get('cpkey');
function sendMessage() {
    let messageInput = document.getElementById('messageTextarea');
    let message = messageInput.value;
    if (message.trim() !== '') {
        let chatMessage = {
            content: message,
            senderId: document.body.getAttribute('data-userid'),
            senderName: document.body.getAttribute('data-name'),
            cpkey: cpkey
        };
        stompClient.send("/app/send", {}, JSON.stringify(chatMessage));
        messageInput.value = '';
    }
}
// 사용자 목록을 화면에 표시하는 함수
function displayUsers(users) {
	console.log("displayUsers called:", users);
    let memberArea = document.getElementById('memberArea');

    users.forEach(user => {
        // '나'는 제외
        if (user.userid === document.body.getAttribute('data-userid')) return;

        // 이미 추가된 사용자인지 확인
        if (document.getElementById('user-' + user.userid)) return;  // 이미 화면에 추가된 사용자라면 추가하지 않고 return

        let image = user.image || 'defaultImage.jpg';
        let name = user.name || 'Unknown';

        memberArea.innerHTML += `
            <div class="member" id="user-${user.userid}">
                <div class="memberModalBtn" onclick="memMpopen()">
                    <img src="./source/${image}.jpg" alt="">
                </div>
                <span>${name}</span>
                <p class="groupon"></p>
            </div>`;
    });
}

function displayMessage(senderId, senderName, message, senderImage) {
    let loggedInUserId = document.body.getAttribute('data-userid'); 
    let loggedInUserName = document.body.getAttribute('data-name'); 
    let messageArea = document.getElementById('messageArea');
    let currentDate = new Date();
    let time = currentDate.getHours() + ':' + currentDate.getMinutes();
    if (senderId === loggedInUserId) {
        // 로그인한 사용자의 메시지
        messageArea.innerHTML += `
            <li class="mychat">
                <div class="mychatBlank"></div>
                <div class="mychatTime">
                    <p class="sendDate">${time}</p>
                </div>
                <div class="chatCom">
                    <p class="mychatInner">
                        <span>${message}</span>
                    </p>
                </div>
            </li>`;
    } else {
        // 다른 사용자의 메시지
        messageArea.innerHTML += `
            <li class="ansarea">
                <div class="ansprof">
                    <img src="./source/${senderImage}.jpg" alt="">
                </div>
                <div class="chatCom">
                    <p>${senderName}</p>
                    <p class="ansInner">${message}</p>
                </div>
                <p class="sendDate">${time}</p>
            </li>`;
    }
    scrollToBottom();
}
// 채팅방 입장 시 시간 표시
function checkAndDisplayConnectionTime() {
    let currentDate = new Date();
    let storedDateStr = localStorage.getItem('lastConnectionDate');
    
    // 현재 날짜를 "2023-08-09" 형식으로 변환
    let formattedCurrentDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;

        // 마지막 접속 날짜가 오늘과 다르면 시간 표시
        displayConnectionTime(currentDate);
        
        // 마지막 접속 날짜를 오늘로 업데이트
        localStorage.setItem('lastConnectionDate', formattedCurrentDate);
    if (storedDateStr !== formattedCurrentDate) {
    }
}

function displayConnectionTime(date) {
    let hours = String(date.getHours()).padStart(2, '0');
    let minutes = String(date.getMinutes()).padStart(2, '0');
    let message = `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일 ${hours}시 ${minutes}분`;
    
    messageArea.innerHTML += `<li class="ment"><p class="mentp">${message}</p></li>`;
    console.log(message);
}

// 채팅방에 접속할 때마다 함수 실행
checkAndDisplayConnectionTime();



// localStorage 저장 로직
// 채팅방 추가
function addChatRoom(room) {
    let chatRooms = JSON.parse(localStorage.getItem('chatRooms')) || [];
    chatRooms.push(room);
    localStorage.setItem('chatRooms', JSON.stringify(chatRooms));
}

// 메시지 저장 로직 (채팅방 별로)
function saveMessageToLocalStorage(key, receivedMessage) {
    let messages = JSON.parse(localStorage.getItem(`chatMessages_${key}`)) || [];
    messages.push(receivedMessage);
    localStorage.setItem(`chatMessages_${key}`, JSON.stringify(messages));
}

// 메시지 불러오는 로직 (채팅방 별로)
function loadMessagesFromLocalStorage(key) {
    let messages = JSON.parse(localStorage.getItem(`chatMessages_${key}`)) || [];
    messages.forEach(message => {
        displayMessage(message.senderId, message.senderName, message.content, message.senderImage);
    });
}
// 로컬스토리지의 채팅방 정보
function loadChatRooms() {
    return JSON.parse(localStorage.getItem('chatRooms')) || [];
}
// 웹소켓 연결 예외 처리
function onConnected() {
    console.log("Connected to WebSocket server.");
}
function onError(error) {
    console.error('WebSocket Connection Error:', error);
}

// 채팅방 목록을 화면에 표시하는 함수
function displayChatRooms() {
    let chatRooms = loadChatRooms();
    let chatRoomListArea = document.getElementById('chatRoomListArea');

    // 채팅방 목록을 비웁니다. (새로운 데이터로 업데이트하기 위해)
    chatRoomListArea.innerHTML = '';

    chatRooms.forEach(room => {	
      //  let lastMessage = room.messages && room.messages[room.messages.length - 1] ? room.messages[room.messages.length - 1].content : '';
      //  let lastMessageDate = room.messages && room.messages[room.messages.length - 1] ? room.messages[room.messages.length - 1].timestamp : '';
      //  let daysAgo = calculateDaysAgo(new Date(lastMessageDate));
		console.log("room:"+room.participants.length)
        chatRoomListArea.innerHTML += `
        <div class="chatroom" data-roomkey="${room.key}" onclick="handleRoomClick(event)">
            <img src="./source/${room.image}" alt="">
            <div class="roominfo">
                <div class="roomtitle">
                    <p >${room.title}</p>
                </div>
                <div class="listmsgtime">
                    <div></div>
                </div>
            </div>
        </div>`;
    });
}
/* 초기버전
function displayChatRooms() {
    let chatRooms = loadChatRooms();
    let chatRoomListArea = document.getElementById('chatRoomListArea');

    // 채팅방 목록을 비웁니다. (새로운 데이터로 업데이트하기 위해)
    chatRoomListArea.innerHTML = '';

    chatRooms.forEach(room => {	
      //  let lastMessage = room.messages && room.messages[room.messages.length - 1] ? room.messages[room.messages.length - 1].content : '';
      //  let lastMessageDate = room.messages && room.messages[room.messages.length - 1] ? room.messages[room.messages.length - 1].timestamp : '';
      //  let daysAgo = calculateDaysAgo(new Date(lastMessageDate));
		console.log("room:"+room.participants.length)
        chatRoomListArea.innerHTML += `
        <div class="chatroom" data-roomkey="${room.key}" onclick="handleRoomClick(event)">
            <img src="./source/${room.image}" alt="">
            <div class="roominfo">
                <div class="roomtitle">
                    <p>${room.title}</p>
                    <span>${room.participants.length}</span>
                </div>
                <p class="lastMsg">${lastMessage}</p>
                <div class="listmsgtime">
                    <div></div>
                    <span>${daysAgo}일전</span>
                </div>
            </div>
        </div>`;
    });
}
*/
function handleRoomClick(event) {
    let roomKey = event.currentTarget.getAttribute("data-roomkey");
    console.log("Selected Room Key:", roomKey);

    // 현재 URL에서 쿼리스트링을 제거하고 새로운 roomKey로 쿼리스트링을 추가합니다.
    let newURL = window.location.protocol + "//" + window.location.host + window.location.pathname + '?cpkey=' + roomKey;

    // 새로운 URL로 히스토리를 변경합니다. (페이지는 새로고침되지 않습니다.)
    window.history.pushState({}, '', newURL);

    // URL 변경 후 cpkey 값을 직접 갱신합니다.
    cpkey = roomKey;
    
    // 채팅방 이동 시 채팅 초기화
    let messageArea = document.getElementById('messageArea');
    messageArea.innerHTML="";

    // 채팅방 클릭 시 채팅 내용 로딩
    loadMessagesFromLocalStorage(cpkey);
	chatRoomTitle()
	checkAndDisplayConnectionTime();
}
function chatRoomTitle(){
	    // 선택된 채팅방의 제목을 찾습니다.
    let chatRooms = loadChatRooms();
    let selectedChatRoom = chatRooms.find(room => room.key === cpkey);
    if (selectedChatRoom) {
		let titleSpan = document.querySelector("#chatTitle");  // id="chatTitle" 인 <span> 태그를 선택합니다.
        titleSpan.textContent = selectedChatRoom.title;  // 선택된 채팅방의 제목을 <span> 태그에 표시합니다.
    }
}



// 날짜로부터 몇 일 전인지 계산하는 함수
/*
function calculateDaysAgo(date) {
    if (!date || isNaN(Date.parse(date))) {
        return "알 수 없음";  // 유효하지 않은 날짜일 때 반환
    }

    if (!(date instanceof Date)) {
        date = new Date(date);  // 문자열 또는 타임스탬프 형태의 날짜를 Date 객체로 변환
    }

    let currentDate = new Date();
    let timeDiff = currentDate.getTime() - date.getTime();
    return Math.ceil(timeDiff / (1000 * 3600 * 24));
}
*/

// 페이지 로딩 시 채팅방 목록을 불러옵니다.
document.addEventListener("DOMContentLoaded", function() {
    displayChatRooms();
    chatRoomTitle()
});